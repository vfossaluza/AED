[["apresentacao_r.html", "3 Apresentação à linguagem R 3.1 Como instalar 3.2 Comparação com outras linguagens estatísticas 3.3 Introdução ao RMarkdown 3.4 Operadores Básicos 3.5 Estrutura de Dados em R 3.6 Estruturas de controle 3.7 Funções 3.8 Funções Básicas e Pacotes 3.9 Exercícios", " 3 Apresentação à linguagem R O R é uma linguagem de programação amplamente utilizada para análise de dados, cálculo estatísticos e visualização de dados. Além disso, o R tem uma enorme coleção de pacotes que ampliam suas funcionalidades, usaremos alguns durante o nosso estudo. O RStudio é uma interface gráfica para a linguagem de programação R. Ele torna o R mais fácil de usar e fornece algumas funcionalidades úteis. 3.1 Como instalar Para instalar o R e o R-Studio basta seguir as instruções aqui e aqui 3.2 Comparação com outras linguagens estatísticas Diferente de outras linguagens de programação, o R foi desenvolvido especificamente para a área de estatística, sendo usado na análise de dados e modelagem. Por isso, essa linguagem possui uma enorme quantidade de pacotes voltados para visualização e análise de dados (alguns exemplos são o ggplot2, dplyr, caret). 3.3 Introdução ao RMarkdown Na disciplina de Análise Exploratória de Dados, usaremos somente o RMarkdown, uma ferramenta que nos permite escrever textos e executar códigos em R. Para criar um arquivo em RMarrkdown clique em File &gt; New File &gt; R Markdown. Preencha as informações iniciais, como o título do documento e o autor e por fim escolha o tipo de saída, como PDF, HTML ou Word. Estrutura de um Arquivo RMarkdown Um arquivo .Rmd tem a seguinte estrutura: Cabeçalho YAML, que define as configurações do documento. title: &quot;Introdução ao RMarkdown&quot; author: &quot;Seu Nome&quot; date: &quot;18/03/2025&quot; output: html_document Texto formatado, que usa a sintaxe Markdown para formatação de texto, por exemplo: “# Título 1” para criar títulos de nível 1. Para destacar: Texto em itálico ou Texto em negrito. Blocos de códigos (chunks), que são delimitados por três crases (```) e é onde você pode escrever e executar os comandos em R. Eles permitem integrar o código diretamente ao documento, gerando tabelas, gráficos, etc. Um atalho para cria-lo é com CTRL+ALT+I. # seu código R. 3.4 Operadores Básicos Operadores de atribuição: Em R usamos os operadores de atribuição para atribuir valores a variáveis. Para fazer isso podemos usar &lt;-, -&gt; e =. a &lt;- 5 # armazena o valor 5 dentro da variável &quot;a&quot; a ## [1] 5 10 -&gt; b # armazena o valor 10 dentro da variável &quot;b&quot; b ## [1] 10 c = 7 # armazena o valor 7 dentro da variável &quot;c&quot; c ## [1] 7 Mesmo sendo possível usar diferentes operadores de atribuição, o padrão costuma ser feito com &lt;-. Para isso, podemos usar o atalho ALT+-. Operadores aritméticos: Para realizar operações matemáticas básicas, usamos: # Adição: &quot;+&quot; resultado1 &lt;- 7 + 3 # Subtração: &quot;-&quot; resultado2 &lt;- 50 - 5 # Multiplicação: &quot;*&quot; resultado3 &lt;- 6 * 7 # 42 # Divisão: &quot;/&quot; resultado4 &lt;- 17 / 3 # Exponenciação: &quot;^&quot; ou &quot;**&quot; resultado5 &lt;- 2 ^ 4 resultado6 &lt;- 3 ** 2 # Resto da divisão: &quot;%%&quot; resultado7 &lt;- 10 %% 3 # Divisão inteira: &quot;%/%&quot; resultado8 &lt;- 10 %/% 3 Operadores de comparação: Usamos os operadores de comparação para comparar dois valores, sendo retorado um valor lógico: TRUE ou FALSE, dependendo do resultado da comparação. # Igualdade: &quot;==&quot; 3 == 3 # retorna TRUE ## [1] TRUE 3 == 4 # retorna FALSE ## [1] FALSE # Desigualdade: &quot;!=&quot; 8 != 7 # retorna TRUE ## [1] TRUE 9 != 9 # retorna FALSE ## [1] FALSE # Maior que: &quot;&gt;&quot; 7 &gt; 3 # retorna TRUE ## [1] TRUE # Menor que: &quot;&lt;&quot; 7 &lt; 3 # retorna FALSE ## [1] FALSE # Maior ou igual: &quot;&gt;=&quot; 8 &gt;= 10 # retorna FALSE ## [1] FALSE # Menor ou igua: &quot;&lt;=&quot; 9 &lt;= 9 # retorna TRUE ## [1] TRUE Valores especiais Os valores especiais são usados para representar situações atípicas ou condições especiais nos dados, como valores ausentes, infinitos ou indefinidos. NA (Not Available): O valor NA representa dados ausentes ou não disponíveis. a &lt;- NA b &lt;- c(1, 2, 3) b[4] # valor fora dos límites de um vetor também é NA ## [1] NA # Verifica se o valor é NA is.na(a) ## [1] TRUE is.na(b) ## [1] FALSE FALSE FALSE NaN (Not a Number): um tipo especial de NA, usado para representar resultados indefinidos de operações matemáticas, como divisões por zero. c &lt;- 0/0 d &lt;- log(-1) ## Warning in log(-1): NaNs produzidos # Verifica se o valor é NaN is.nan(c) ## [1] TRUE is.nan(d) ## [1] TRUE Inf e -Inf (Infinito): Inf e -Inf representam valores infinitos. f &lt;- 2 / 0 g &lt;- -1 / 0 # Verifica se o valor é Inf is.infinite(f) ## [1] TRUE NULL: representa a ausência de um valor ou objeto. Diferente do NA, que representa um valor ausente dentro do de um vetor ou lista, NULL indica que o objeto não existe. Usamos normalmente para iniciar variáveis ou para remover elementos de listas. h &lt;- NULL # Verifica se o valor é null is.null(h) ## [1] TRUE 3.5 Estrutura de Dados em R Vetores Os vetores são uma estrutura de dados que armazena uma sequência de elementos, sendo todos do mesmo tipo (número, caracteres ou valores lógicos). Vetor numérico: n &lt;- c(11, 22, 33, 44) n[2] # Valor no índice 2 do vetor ## [1] 22 # Valor do vetor em um subconjunto de índices n[c(1,3)] ## [1] 11 33 n[c(3,1,4,2)] ## [1] 33 11 44 22 n[1:3] # valores do vetor do índice 1 ao índice 3 ## [1] 11 22 33 # Multiplicação por escalar (multiplica cada elemento) 2*n ## [1] 22 44 66 88 # Soma com escalar (soma cada elemento) v &lt;- n+1 # Soma de Vetores (soma cada termo de n com o elemento de mesmo índice de v) n+v ## [1] 23 45 67 89 # Produto de Vetores (termo a termo) n*v ## [1] 132 506 1122 1980 # Produto Escalar (multiplica os dois vetores da mesma posição e soma os resultados dessas multiplicações) n%*%v ## [,1] ## [1,] 3740 # Quando somamos vetores de tamanhos diferentes repetimos os elementos até o tamanho do maior n - c(1,2) ## [1] 10 20 32 42 # Caso o tamanho de um deles naõ seja multiplo do outro, o R solta uma mensagem de erro c(1,2,3) - n ## Warning in c(1, 2, 3) - n: comprimento do objeto maior não é múltiplo do ## comprimento do objeto menor ## [1] -10 -20 -30 -43 Vetor de Caracteres: Nomes = c(&quot;Letícia&quot;,&quot;Mariana&quot;,&quot;Guilherme&quot;,&quot;Viviane&quot;, &quot;Ana&quot;,&quot;Otávio&quot;,&quot;Eduardo&quot;) # Identificando o tipo de vetor typeof(Nomes) ## [1] &quot;character&quot; class(Nomes) ## [1] &quot;character&quot; Vetor de valores lógicos: Feminino = c(TRUE,TRUE,FALSE,TRUE, TRUE, FALSE, FALSE) # Identificando o tipo de vetor class(Feminino) ## [1] &quot;logical&quot; # TRUE e FALSE são tratados como 1 e 0 sum(Feminino) ## [1] 4 Matrizes Matrizes é uma estrutura de dados que permite armazenar os dados de uma forma bidimensional, com linhas e colunas. Todos os elementos precisam ser do mesmo tipo. M &lt;- matrix(c(1, 0, 0, 2, 1, 0, 3, 4, 1), ncol=3) # Dimensção da Matriz M dim(M) # linha, coluna ## [1] 3 3 # Acessando um elemento da matriz M[1, 2] # elemento da linha 1 e da coluna 2 ## [1] 2 M[1,] # primeira linha (vetor) ## [1] 1 2 3 M[,3] # última coluna (vetor) ## [1] 3 4 1 # Determinante det(M) ## [1] 1 # Matriz Inversa IM &lt;- solve(M) # Produto de Matrizes M%*%IM ## [,1] [,2] [,3] ## [1,] 1 0 0 ## [2,] 0 1 0 ## [3,] 0 0 1 Listas Diferente dos vetores, as listas podem armazenar objetos de tipos diferentes, sendo muito mais flexíveis. lista &lt;- list( nome = &quot;Letícia&quot;, notas = c(8, 10, 9, 7, 6, 8), matriz = matrix(1:4, nrow = 2) ) # Acessando elementos de uma lista lista[[3]] # usando o índice ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 lista$notas # usando o nome ## [1] 8 10 9 7 6 8 lista[c(&quot;nome&quot;, &quot;notas&quot;)] ## $nome ## [1] &quot;Letícia&quot; ## ## $notas ## [1] 8 10 9 7 6 8 # Modificando elementos lista$notas &lt;- c(8, 9) Fatores No R, a estrutura de dados fatores podem ser usadas para representar os dados categóricos, ou seja, variáveis que assumem valores diferentes, como níveis, podendo ser ordenados ou não. nivel_educacional &lt;- factor(c(&quot;Fundamental&quot;, &quot;Médio&quot;, &quot;Superior&quot;)) satisfacao &lt;- factor(c(&quot;baixa&quot;, &quot;alta&quot;, &quot;média&quot;), levels = c(&quot;baixa&quot;, &quot;média&quot;, &quot;alta&quot;), # indica os níveis ordered = TRUE) # indica que a ordem dos níveis importa Para trabalhar com fatores podemos usar o pacote forcats, que nos fornece funções para criar, modificar e organizar fatores de forma eficiente, sendo possível reordenar níveis com base em valores associados, agrupar categorias raras, ordenar níveis com base em suas frequências e trabalhar com dados categóricos de forma mais eficaz. Ainda nesse capítulo, falaremos mais sobre a instalação e o uso de pacotes dentro do RMarkdown. Data Frames Os Data Frames são uma das estruturas mais usadas para armazenar os dados em formato de tabela. Cada coluna é um vetor de mesmo tamanho e pode ter tipos diferentes (números, caracteres, fatores, etc.). df &lt;- data.frame( nome = c(&quot;Mariana&quot;, &quot;Juliana&quot;, &quot;Isabela&quot;), idade = c(19, 8, 14), altura = c(1.68, 1.50, 1.55) ) # Acessando colunas df$nome ## [1] &quot;Mariana&quot; &quot;Juliana&quot; &quot;Isabela&quot; # Acessando elementos usando colchetes - o primeiro indíce refere-se as linhas e o segundo a # as colunas df[, &quot;idade&quot;] ## [1] 19 8 14 df[1, ] ## nome idade altura ## 1 Mariana 19 1.68 df[1, &quot;altura&quot;] ## [1] 1.68 Por mais que possa parecer com a estrutura de listas, o data frame é uma tabela de dados em formato de linhas e colunas. Diferente de uma lista, as suas colunas devem ter o mesmo número de elementos. Também podemos manipular os data frames no R usando banco de dados. # Carregando o banco de dados &#39;iris&#39; data(&quot;iris&quot;) # Vendo o conteúdo do banco de dados # iris # tudo head(iris) # primeiros elementos ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa tail(iris) # últimos elementos ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica # Dimensões do banco de bados dim(iris) # primeiro as linhas, depois as colunas ## [1] 150 5 nrow(iris) # número de linhas ## [1] 150 ncol(iris) # número de colunas ## [1] 5 # Nome das variáveis (colunas) names(iris) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; colnames(iris) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; # Nome das variáveis (linhas) rownames(iris) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; ## [13] &quot;13&quot; &quot;14&quot; &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; &quot;20&quot; &quot;21&quot; &quot;22&quot; &quot;23&quot; &quot;24&quot; ## [25] &quot;25&quot; &quot;26&quot; &quot;27&quot; &quot;28&quot; &quot;29&quot; &quot;30&quot; &quot;31&quot; &quot;32&quot; &quot;33&quot; &quot;34&quot; &quot;35&quot; &quot;36&quot; ## [37] &quot;37&quot; &quot;38&quot; &quot;39&quot; &quot;40&quot; &quot;41&quot; &quot;42&quot; &quot;43&quot; &quot;44&quot; &quot;45&quot; &quot;46&quot; &quot;47&quot; &quot;48&quot; ## [49] &quot;49&quot; &quot;50&quot; &quot;51&quot; &quot;52&quot; &quot;53&quot; &quot;54&quot; &quot;55&quot; &quot;56&quot; &quot;57&quot; &quot;58&quot; &quot;59&quot; &quot;60&quot; ## [61] &quot;61&quot; &quot;62&quot; &quot;63&quot; &quot;64&quot; &quot;65&quot; &quot;66&quot; &quot;67&quot; &quot;68&quot; &quot;69&quot; &quot;70&quot; &quot;71&quot; &quot;72&quot; ## [73] &quot;73&quot; &quot;74&quot; &quot;75&quot; &quot;76&quot; &quot;77&quot; &quot;78&quot; &quot;79&quot; &quot;80&quot; &quot;81&quot; &quot;82&quot; &quot;83&quot; &quot;84&quot; ## [85] &quot;85&quot; &quot;86&quot; &quot;87&quot; &quot;88&quot; &quot;89&quot; &quot;90&quot; &quot;91&quot; &quot;92&quot; &quot;93&quot; &quot;94&quot; &quot;95&quot; &quot;96&quot; ## [97] &quot;97&quot; &quot;98&quot; &quot;99&quot; &quot;100&quot; &quot;101&quot; &quot;102&quot; &quot;103&quot; &quot;104&quot; &quot;105&quot; &quot;106&quot; &quot;107&quot; &quot;108&quot; ## [109] &quot;109&quot; &quot;110&quot; &quot;111&quot; &quot;112&quot; &quot;113&quot; &quot;114&quot; &quot;115&quot; &quot;116&quot; &quot;117&quot; &quot;118&quot; &quot;119&quot; &quot;120&quot; ## [121] &quot;121&quot; &quot;122&quot; &quot;123&quot; &quot;124&quot; &quot;125&quot; &quot;126&quot; &quot;127&quot; &quot;128&quot; &quot;129&quot; &quot;130&quot; &quot;131&quot; &quot;132&quot; ## [133] &quot;133&quot; &quot;134&quot; &quot;135&quot; &quot;136&quot; &quot;137&quot; &quot;138&quot; &quot;139&quot; &quot;140&quot; &quot;141&quot; &quot;142&quot; &quot;143&quot; &quot;144&quot; ## [145] &quot;145&quot; &quot;146&quot; &quot;147&quot; &quot;148&quot; &quot;149&quot; &quot;150&quot; 3.6 Estruturas de controle As estruturas de controles são “instruções” que nos permiter criar lógica nos programas e determinar como as operações e funções serão excecutadas. Condicionais As estruturas condicionais permitem executar blocos de código com base em condições lógicas. Elas verificam se determinada condição é verdadeira ou falsa e excecutam diferentes blocos do código com base no resultado. O comando if avalia se uma condição é verdadeira (TRUE), caso seja o bloco de código associado é excecutado. # if (condição) { # Código executado se a condição for TRUE # } # Exemplo a &lt;- 10 if (a &gt; 5) { print(&quot;a é maior que 5&quot;) } ## [1] &quot;a é maior que 5&quot; Quando é necessário tratar tanto o caso que a condição é verdadeira, quanto o caso em que é falsa, utilizamos if - else. # if (condição) { # Código executado se a condição for TRUE # } else { # Código executado se a condição for FALSE # } # Exemplo b &lt;- 3 if (b &gt; 5) { print(&quot;b é maior que 5&quot;) } else { print(&quot;b é menor ou igual a 5&quot;) } ## [1] &quot;b é menor ou igual a 5&quot; Quando temos mais de uma condição usamos if - else if - else. # if (condição1) { # Código executado se condição1 for TRUE # } else if (condição2) { # Código executado se condição1 for falsa e condição2 for TRUE # } else { # Código executado se nenhuma das condições anteriores for TRUE # } # Exemplo c &lt;- 0 if (c &gt; 0) { print(&quot;c é positivo&quot;) } else if (c &lt; 0) { print(&quot;c é negativo&quot;) } else { print(&quot;c é zero&quot;) } ## [1] &quot;c é zero&quot; Quando se trata de analisar vetores, podemos usar ifelse, que avalia cada elemento de vetor de maneira individual. # ifelse(condição, valor_se_verdadeiro, valor_se_falso) # Exemplo d &lt;- c(-5, 0, 4, 9) resposta &lt;- ifelse(d &gt; 0, &quot;positivo&quot;, &quot;não positivo&quot;) print(resposta) ## [1] &quot;não positivo&quot; &quot;não positivo&quot; &quot;positivo&quot; &quot;positivo&quot; Laços de repetição Os laços de repetição (ou loops) em R nos permitem executar blocos de códigos múltipla vezes. Temos dois principais tipos: for e while. O for é um laço de iteração, usado para iterar sobre uma sequência, como vetores, listas, etc. # for (variável in sequência) { # Código a ser executado # } # Exemplo for (i in 1:5) { print(paste(&quot;O quadrado de&quot;, i, &quot;é&quot;, i^2)) } ## [1] &quot;O quadrado de 1 é 1&quot; ## [1] &quot;O quadrado de 2 é 4&quot; ## [1] &quot;O quadrado de 3 é 9&quot; ## [1] &quot;O quadrado de 4 é 16&quot; ## [1] &quot;O quadrado de 5 é 25&quot; No exemplo acima a variável “i” assume o valor de cada número da sequência em cada iteração, ou seja, i assume a sequência de números de 1 a 5. O while é um laço condicional, ou seja, executa o bloco de código enquanto a condição determinada for verdadeira. # while (condição) { # Código a ser executado # } # Exemplo a &lt;- 1 while (a &lt;= 5) { print(a) a &lt;- a + 1 } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 O exemplo acima realiza uma contagem de 1 até 5. O valor da variável “a” começa em 1, a condição a &lt;= 5 é verificada e enquanto ela for verdadeira o código dentro do laço é executado. A cada iteração o valor de x é impresso e incrementado 1. O loop finaliza assim que a se torna 6, ou seja, o momento em que a condição x&lt;= 5 se torna falsa. É preciso tomar cuidado para que o while não se torne um loop infinito, ou seja, é necessário garantir que a condição imposta no while se torne falsa em algum momento. 3.7 Funções As funções são blocos de código reutilizáveis que nos permitem executar tarefas específicas. A estrutura básica de uma função é: - Nome da função; - Argumentos (entrada que a função espera receber); - Corpo da função (especifica o que a função faz); - Valor de retorno (o que a função retorna após a execução). soma &lt;- function(a, b){ resultado &lt;- a + b return(resultado) } # Testando a função &#39;soma&#39; soma(7, 3) ## [1] 10 Podemos criar funções utilizando estruturas de controle, para determinar o fluxo de execução do código. # Função que calcula o fatorial de um inteiro não negativo fatorial &lt;- function(n){ if(n&lt;0){ print(&quot;Número negativo! Digite um inteiro positivo!&quot;) return() } f &lt;- 1 while(n&gt;1){ f &lt;- f*n n &lt;- n-1 } return(f) } # Testa a função &#39;fatorial&#39; fatorial(4) ## [1] 24 # Teste para um número negativo fatorial(-1) ## [1] &quot;Número negativo! Digite um inteiro positivo!&quot; ## NULL Podemos criar também função com valores padrões, atribuindo valores aos argumentos. Dessa forma, se o usuário não fornecer um valor ao chamar a função, o valor padrão é utilizado. subtracao &lt;- function(a, b = 1) { resultado &lt;- a - b return(resultado) } # Testando a função &#39;subtracao&#39; subtracao(7, 2) # com os dois argumentos ## [1] 5 subtracao(5) # usando o argumento padrão para &quot;b&quot; ## [1] 4 3.8 Funções Básicas e Pacotes As funções básicas são aquelas já incorporadas na linguagem, que não requerem pacotes adicionais. Alguns exemplos são: - ‘mean()’ para calcular a média de um vetor - ‘sd()’ para o desvio padrão. - ‘sum()’ para somar os elementos de um vetor. - ‘prod()’ – Multiplica todos os elementos de um vetor. Já os pacotes são coleções de funções que estendem a funcionalidade do R, permitindo a realização de análises mais específicas. Os pacotes que usaremos nessa apostila são: ggplot2, dplyr, tdyr, forcats, tibble Pacotes podem ser instalados usando install.packages(\"nome_do_pacote\") e carregados com library(nome_do_pacote). 3.9 Exercícios Crie dois vetores de números inteiros: vetor1 e vetor2, ambos com a mesma quantidade de elementos. Depois realize as seguintes operações: some os dois vetores. subtraia o vetor 1 do vetor2. multiplique os dois vetores, elemento por elemento. Crie duas matrizes de dimensões 3x3. Depois realize as seguintes operações: some as duas matrizes. subtraia a segunda matriz da primeira. multiplique as duas matrizes. Crie um data.frame chamado alunos com três colunas: Nome, Idade e Nota. Preencha o data.frame com pelo menos 5 registros. Em seguida, crie uma nova coluna chamada Aprovado, que será TRUE se a Nota for maior ou igual a 5 e FALSE caso contrário. Escreva uma função que retorna uma matriz “E” em que cada elemento é o valor “b” elevado a cada elemento da matriz M. Como padrão, b=e. Escreva uma função que recebe dois parâmetros: base e altura, e retorna a área de um triângulo. Escreva uma que recebe um vetor de números e retorna uma lista com a quantidade de números positivos e a quantidade de números negativos no vetor. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
